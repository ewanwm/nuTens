# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CI Build & Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    strategy:
      matrix:
         OS: [ ubuntu-latest, windows-latest ]
         compiler: [ {cpp: g++, c: gcc}, {cpp: clang++, c: clang} ]

    name: Build & Test ${{ matrix.os }} ${{ matrix.compiler.c }}

    runs-on: ${{ matrix.os }}
    
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cpp }}
      
    steps:
    # this Action should follow steps to set up Python build environment
    - uses: actions/checkout@v4

    - name: Install Protoc Windows
      if: ${{ startsWith(matrix.OS, 'windows') }}
      uses: arduino/setup-protoc@v3

    - name: Install Protoc Ubuntu
      if: ${{ startsWith(matrix.OS, 'ubuntu') }}
      run: sudo apt install protobuf-compiler
      
    - name: Install Python dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: "PyTorch_requirements.txt"
        
    - name: Configure CMake ubuntu
      if: ${{ startsWith(matrix.OS, 'windows') }}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake \
        -DNT_TEST_COVERAGE=ON \
        -DCMAKE_PREFIX_PATH=`python3 -c "import torch;print(torch.utils.cmake_prefix_path)"` \
        -B ${{github.workspace}}/build \
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Configure CMake windows
      if: ${{ startsWith(matrix.OS, 'ubuntu') }}
      # on windows to get the pytorch config we have to 
      # run the same python command as before but now save it 
      # to a file then read from the file into a variable to pass to cmake
      run: |
        python3 -c "import torch;print(torch.utils.cmake_prefix_path)" > temp.txt
        set /p torchLoc =< temp.txt 
        cmake \
        -DNT_TEST_COVERAGE=ON \
        -DCMAKE_PREFIX_PATH=%torchDir% \
        -B ${{github.workspace}}/build \
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
         
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Generate Coverage Report
      working-directory: ${{github.workspace}}/build
      run: gcovr --json -o nuTens_coverage.json -r .. -f "../nuTens/*"
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        verbose: true
        files: nuTens_coverage.json
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
